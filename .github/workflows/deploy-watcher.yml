name: Deploy Fargate Watcher
on:
  push: { branches: [ "main" ] }
  workflow_dispatch:
env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: auxite-watcher
  ECS_CLUSTER: auxite-cluster
  ECS_SERVICE: auxite-watcher-svc
  ECS_TASK_FAMILY: auxite-watcher
  CONTAINER_NAME: auxite-watcher
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - id: ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build & Push image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV
      - id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def/auxite-watcher.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}
          environment-variables: |
            WS_URL=${{ secrets.WS_URL }}
            HTTP_URL=${{ secrets.HTTP_URL }}
            CHAIN=${{ secrets.CHAIN }}
            ORACLES=${{ secrets.ORACLES }}
            WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}
            WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
            ROLLUP_WINDOW_SEC=${{ secrets.ROLLUP_WINDOW_SEC }}
      - uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
